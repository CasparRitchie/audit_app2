/* eslint-disable no-restricted-globals */

// Import Workbox libraries
import { precacheAndRoute } from 'workbox-precaching';

// Precache all the assets generated by the build process.
precacheAndRoute(self.__WB_MANIFEST);

// URL of your fallback page (offline.html)
const offlineFallbackPage = '/offline.html';

// Cache the offline.html page during the installation of the service worker
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open('offline-cache').then((cache) => {
      return cache.add(offlineFallbackPage);
    })
  );
});

// Cache-first strategy for all navigation requests (so the app works offline)
self.addEventListener('fetch', (event) => {
  if (event.request.mode === 'navigate') {
    event.respondWith(
      caches.match(event.request).then((cached) => {
        return cached || fetch(event.request).catch(() => {
          // If fetch fails (e.g., user is offline), show the offline page
          return caches.match(offlineFallbackPage);
        });
      })
    );
  }
});

// Optional: Listen for the service worker's activation event to clean up old caches
self.addEventListener('activate', (event) => {
  const cacheWhitelist = ['offline-cache', 'version-1'];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (!cacheWhitelist.includes(cacheName)) {
            return caches.delete(cacheName);
          }
          return null;
        })
      );
    })
  );
});
